# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
#    AWS_BUCKET_NAME: '%env(AWS_BUCKET_NAME)%'
#    AWS_REGION: '%env(AWS_REGION)%'
    aws.bucket_name: '%env(AWS_BUCKET_NAME)%'
    aws.region: '%env(AWS_REGION)%'

    upload_max_filesize: '%env(int:UPLOAD_MAX_FILESIZE)%'
    upload_max_filesize_admin: '%env(int:UPLOAD_MAX_FILESIZE_ADMIN)%'

    global_from_email: '%env(FROM_EMAIL)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
    App\State\PaymentProcessor:
        arguments:
            $stripeSecretKey: '%env(STRIPE_SECRET_KEY)%'
    App\Service\Stripe\StripeClientService:
        arguments:
            $apiSecretKey: '%env(STRIPE_SECRET_KEY)%'

    App\EventListener\ExceptionListener:
        tags:
            - { name: 'kernel.event_listener', event: 'kernel.exception', priority: 20000 }

    # set up exception listener (for API)
    App\EventListener\ApiExceptionListener:
        tags:
            - { name: 'kernel.event_subscriber' }
    # Custom controllers for Product
    App\Controller\CreateProductController:
        tags: [ 'controller.service_arguments' ]

    App\Controller\ProductImagePatchController:
        tags: [ 'controller.service_arguments' ]

    App\Service\Product\Patch\ProductImageUpdateService:
        tags: [ 'controller.service_arguments' ]

    # Registering twig extensions
    Twig\Extra\Inky\InkyExtension:
        tags: [ 'twig.extension' ]

    Twig\Extra\CssInliner\CssInlinerExtension:
        tags: ['twig.extension']
    
#    App\Validator\CanPostReviewValidator:
#        tags:
#            - { name: validator.constraint_validator }

    Aws\S3\S3Client:
        arguments:
            -
                version: 'latest'
                region: '%env(AWS_REGION)%'
                credentials:
                    key: '%env(AWS_ACCESS_KEY_ID)%'
                    secret: '%env(AWS_SECRET_ACCESS_KEY)%'

    App\Service\S3UploadService:
        arguments:
            $s3Client: '@Aws\S3\S3Client'
            $s3BucketName: '%env(AWS_BUCKET_NAME)%'

    App\Service\UploadFileSizeProvider:
        arguments:
            $defaultMaxSize: '%upload_max_filesize%'
            $adminMaxSize: '%upload_max_filesize_admin%'
    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

# custom exception listener that listens for the error
#    App\EventListener\CustomExceptionListener:
#        tags:
#            - { name: kernel.event_listener, event: kernel.exception, priority: 10 }

#    App\ApiPlatform\ExceptionsNormalizer\InvalidDataExceptionNormalizer:
#        tags:
#            - { name: 'serializer.normalizer', priority: 2000 }