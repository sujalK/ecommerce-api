Database Related work

E-Commerce API - [Tables]
—------------------------
→ User
id
first_name
last_name
email
username
account_active_status ( varchar: active, inactive )
verification_status ( bool, 0 -> unverified, 1 -> verified )

→ Cart
id
user_id
status ( active [ in-progress ], checked_out ( placed order ), abandoned ( moved away from the site ) )
created_at
updated_at
coupon_code [ NULL ] [ can store the coupon that applies to this cart ]
total_price
currency
coupon_code ( stores string from the COUPON Entity )

→ CartItem
id ( Primary Key )
cart_id ( Foreign Key )
product_id ( Foreign key )
quantity
price_per_unit ( The price of one unit of the product at the time it was added to the cart. )
total_price ( cached total price for this item: quantity * price_per_unit )
createdAt
updatedAt

→ Product
id
name [ varchar(255) ]
description ( text )
price [ decimal(10, 2) ]
image_url
category_id
created_at
updated_at
is_active ( indicates whether the product is available for sale. )

→ Order
id
user_id ( foreign key, because we need to track order for a specific user )
total_price ( calculated from Cart or CartItems )
status ( pending, shipped, delivered, canceled )
shipping_address ( stored or linked to a ShippingAddress entity )
payment_status ( paid, pending, failed )
coupon_code ( string one, so that we can analyze our data, which we kept here for tracking purposes)
currency
created_at
updated_at
shipping_method ( foreign key )

→ OrderItem
id
order_id ( many-to-one )
product_id
quantity
unit_price ( at the time of order )
total_price ( of that product at the time of order )
discount_amount
created_at
updated_at

→ ShippingAddress
id
user_id ( foreign key )
address_line_1 ( string ) [ First line of the street address. ]
address_line_2 ( Second line of the street address e.g. apartment, suite. )
city
state
postal_code
country
phone_number
created_at
updated_at


→ Payment
id
order_id ( foreign key, many-to-one relationship with Order )
payment_method ( credit_card, PayPal, etc )
payment_status ( pending, completed, failed, refunded )
amount
payment_date
transaction_id ( if applicable )
billing_address ( could link to an address entity or be stored directly )

→ Coupon
id
code ( string, unique coupon code )
discount_type ( percentage, fixed )
discount_value ( this would act as a percentage or fixed depending on discount_type )
max_discount_amount [ For percentage discounts, this can limit the maximum discount amount. ]
( 10% off, and In case of percentage max discount up to Rs. 500 )
applies_to [ NOT SURE TO IMPLEMENT ]
	[ JSON: all, category, products ]
minimum_cart_value ( Minimum cart value required to apply the coupon e.g. Rs. 500 )
start_date [ The date from which the coupon is valid ]
end_date [ The expiration date for the coupon ]
usage_limit [ Maximum number of times the coupon can be used globally ]
user_limit [ Maximum number of times a single user can use the coupon ]
description [ A brief description of the coupon e.g. “10% off on all electronics” ]
is_active [ Boolean to mark whether the coupon is currently active ]

→ ProductCategory
id
name ( Category Name )
description

→ ProductReview
id
product (many-to-one relationship with Product )
user ( many-to-one relationship with User )
rating
review_text ( string )
created_at
updated_at

→ ShippingMethod
id
name ( standard, quicker )
cost
estimated_delivery_time ( null by default, and user or system can decide it later )


→ Inventory
id
product ( many-to-one relationship with Product )
quantity_in_stock
quantity_sold
quantity_backordered

→ Wishlist
id
user ( Many to one relationship with User )
product ( Many to one relationship with Product )
created_at
updated_at

→ AuditLog / ActivityLog
id
user ( foreign key with User table )
action_type ( ORDER_PLACEDD, LOGIN, etc. )
description
created_at

→ Notification
id
user ( A User can have multiple notifications )
message
is_read
created_at

